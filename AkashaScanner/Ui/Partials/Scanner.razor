@inherits RazorComponent

<div class="cards">
    <Section Title="Instructions">
        <ol class="instructions">
            @Instructions
        </ol>
    </Section>
    <DataUpdateSection>
        @DataUpdates
    </DataUpdateSection>
    @if (Options != null)
    {
        @if (Context != null)
        {
            <Section Title="Options">
                <Form Context="Context">
                    @Options
                </Form>
            </Section>
        }
        else
        {
            <Section Title="Options">
                @Options
            </Section>
        }
    }
</div>
<div class="actions">
    <button type="button" class="button button--primary button--action" disabled="@(!BtnEnabled)" @onclick="HandleSubmit">Start</button>
</div>
<Modal Visible="@ShowModal">
    <div class="modal__content">
        @if (Status == ScanStatus.CountingDown) {
            <div>Starting scan in @Countdown</div>
            <Loading />
        }
        else if (Status == ScanStatus.Running)
        {
            <div>Scanning in progress</div>
            <Loading />
        }
        else if (Status == ScanStatus.Canceling)
        {
            <div>Canceling</div>
            <Loading />
        }
        else
        {
            if (Status == ScanStatus.Success)
            {
                <div class="status-icon status-icon--success">
                    <svg viewBox="64 64 896 896" width="1em" height="1em"><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm193.5 301.7l-210.6 292a31.8 31.8 0 01-51.7 0L318.5 484.9c-3.8-5.3 0-12.7 6.5-12.7h46.9c10.2 0 19.9 4.9 25.9 13.3l71.2 98.8 157.2-218c6-8.3 15.6-13.3 25.9-13.3H699c6.5 0 10.3 7.4 6.5 12.7z"></path></svg>
                </div>
            }
            else if (Status == ScanStatus.Interrupted)
            {
                <div class="status-icon status-icon--failed">
                    <svg viewBox="64 64 896 896" width="1em" height="1em"><path d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"></path></svg>
                </div>
            }
            <div class="status-text">@Status</div>
            <button type="button" class="button button--primary" @onclick="HandleCloseModal">Close</button>
        }
    </div>
</Modal>

@code {
    [Parameter]
    public Func<bool> OnSubmit { get; set; } = default!;

    [Parameter]
    public RenderFragment? Instructions { get; set; }

    [Parameter]
    public RenderFragment? DataUpdates { get; set; }

    [Parameter]
    public RenderFragment? Options { get; set; }

    [Parameter]
    public object? Model
    {
        get => Context?.Model;
        set
        {
            if (value != null)
                Context = new(value);
        }
    }

    [Parameter]
    public bool Enabled { get; set; }

    [Flux.GetProcessStatus]
    public ProcessStatus _ProcStatus
    {
        get => ProcStatus;
        set
        {
            if (value != ProcessStatus.Active && Status == ScanStatus.Running)
            {
                Status = ScanStatus.Canceling;
            }
            ProcStatus = value;
        }
    }

    public ProcessStatus ProcStatus { get; set; }

    private EditContext? Context;
    private ScanStatus Status { get; set; } = ScanStatus.Interrupted;
    private int Countdown;
    private bool ShowModal { get; set; }

    private bool BtnEnabled => Enabled && ProcStatus.IsRunning();

    public async Task HandleSubmit()
    {
        if (Context != null && !Context.Validate()) return;
        ShowModal = true;
        Status = ScanStatus.CountingDown;
        for (Countdown = 3; Countdown > 0; Countdown--) {
            StateHasChanged();
            await Task.Delay(1000);
        }
        Status = ScanStatus.Running;
        StateHasChanged();
        await Task.Run(() =>
        {
            var success = OnSubmit();
            if (success) Status = ScanStatus.Success;
            else Status = ScanStatus.Interrupted;
            InvokeAsync(StateHasChanged);
        });
    }

    public void HandleCloseModal()
    {
        ShowModal = false;
        StateHasChanged();
    }

    private enum ScanStatus
    {
        Idle,
        CountingDown,
        Running,
        Canceling,
        Success,
        Interrupted,
    }
}
